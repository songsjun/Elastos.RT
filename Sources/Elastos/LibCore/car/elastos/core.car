//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    merge("core/Errors.car");
    merge("core/Exceptions.car");
    merge("core/ICharSequence.car");
    merge("core/IAppendable.car");
    merge("core/ICloneable.car");
    merge("core/IComparable.car");
    merge("core/IComparator.car");
    merge("core/IStringBuilder.car");
    merge("core/IStringBuffer.car");
    merge("core/IArrayOf.car");
    merge("core/INumber.car");
    merge("core/IBoolean.car");
    merge("core/IByte.car");
    merge("core/IChar32.car");
    merge("core/IInteger16.car");
    merge("core/IInteger32.car");
    merge("core/IInteger64.car");
    merge("core/IFloat.car");
    merge("core/IDouble.car");
    merge("core/IString.car");
    merge("core/IRunnable.car");
    merge("core/ISynchronize.car");
    merge("core/IThread.car");
    merge("core/IThreadGroup.car");
    merge("core/IClassLoader.car");
    merge("core/IThrowable.car");
    merge("core/IStackTraceElement.car");
    merge("core/IBlockGuard.car");
    merge("core/ICloseGuard.car");
    merge("core/IEnum.car");
    merge("core/ISystem.car");
    merge("core/IThreadLocal.car");

    merge("core/reflect/IInvocationHandler.car");
    merge("core/reflect/IProxyFactory.car");

    merge("io/ISerializable.car");

    interface Elastos.Core.IRunnable;
    interface Elastos.Core.ICharSequence;
    interface Elastos.IO.ISerializable;

    namespace Elastos {
    namespace Core {

    class CObject {
        constructor();

        interface IObject;
        interface ISynchronize;
        interface IWeakReferenceSource;
    }

    class CThread {
         /**
         * Constructs a new {@code Thread} with no {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the same
         * {@code ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor();

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the same
         * {@code ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor(
            [in] IRunnable* runnable);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and name
         * provided. The new {@code Thread} will belong to the same {@code
         * ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         */
        constructor(
            [in] IRunnable* runnable,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with no {@code Runnable} object and the
         * name provided. The new {@code Thread} will belong to the same {@code
         * ThreadGroup} as the {@code Thread} calling this constructor.
         *
         * @param threadName
         *            the name for the {@code Thread} being created
         *
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         *
         */
        constructor(
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object and a
         * newly generated name. The new {@code Thread} will belong to the {@code
         * ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will
         *            belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object, the given
         * name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            ThreadGroup to which the new {@code Thread} will belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with no {@code Runnable} object, the
         * given name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will belong
         * @param threadName
         *            the name for the {@code Thread} being created
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] String threadName);

        /**
         * Constructs a new {@code Thread} with a {@code Runnable} object, the given
         * name and belonging to the {@code ThreadGroup} passed as parameter.
         *
         * @param group
         *            {@code ThreadGroup} to which the new {@code Thread} will
         *            belong
         * @param runnable
         *            a {@code Runnable} whose method <code>run</code> will be
         *            executed by the new {@code Thread}
         * @param threadName
         *            the name for the {@code Thread} being created
         * @param stackSize
         *            a stack size for the new {@code Thread}. This has a highly
         *            platform-dependent interpretation. It may even be ignored
         *            completely.
         * @throws SecurityException
         *             if <code>group.checkAccess()</code> fails with a
         *             SecurityException
         * @throws IllegalThreadStateException
         *             if <code>group.destroy()</code> has already been done
         * @see java.lang.ThreadGroup
         * @see java.lang.Runnable
         * @see java.lang.SecurityException
         * @see java.lang.SecurityManager
         */
        constructor(
            [in] IThreadGroup* group,
            [in] IRunnable* runnable,
            [in] String threadName,
            [in] Int64 stackSize);

        /**
         * Package-scope method invoked by Dalvik VM to create "internal"
         * threads or attach threads created externally.
         *
         * Don't call Thread.currentThread(), since there may not be such
         * a thing (e.g. for Main).
         */
        constructor(
            [in] IThreadGroup* group,
            [in] String name,
            [in] Int32 priority,
            [in] Boolean daemon);

        interface IThread;
        interface IRunnable;
    }

    class CThreadGroup {
        /**
         * Constructs a new {@code ThreadGroup} with the given name. The new {@code ThreadGroup}
         * will be child of the {@code ThreadGroup} to which the calling thread belongs.
         *
         * @param name the name
         * @throws SecurityException if {@code checkAccess()} for the parent
         *         group fails with a SecurityException
         * @see java.lang.Thread#currentThread
         */
        constructor(
            [in] String name);

        /**
         * Constructs a new {@code ThreadGroup} with the given name, as a child of the
         * given {@code ThreadGroup}.
         *
         * @param parent the parent
         * @param name the name
         * @throws NullPointerException if {@code parent == null}
         * @throws SecurityException if {@code checkAccess()} for the parent
         *         group fails with a SecurityException
         * @throws IllegalThreadStateException if {@code parent} has been
         *         destroyed already
         */
         constructor(
            [in] IThreadGroup* parent,
            [in] String name);

        /**
         * Initialize the special "system" ThreadGroup. Was "main" in Harmony,
         * but we have an additional group above that in Android.
         */
        constructor();

        interface IThreadGroup;
    }

    [local]
    class CPathClassLoader {
        constructor (
            [in] String classPath,
            [in] IClassLoader* parent);

        interface IClassLoader;
    }

    class CString {
        constructor(
            [in] String str);

        interface ICharSequence;
        interface IString;
        interface IComparable;
    }

    class CBoolean {
        constructor(
           [in] Boolean value);

       interface IBoolean;
       interface ISerializable;
       interface IComparable;
    }

    class CByte {
        constructor(
            [in] Byte value);

        interface IByte;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CChar32 {
        constructor(
            [in] Char32 value);

        interface IChar32;
        interface INumber;
        interface ISerializable;
    }

    class CInteger16 {
        constructor(
            [in] Int16 value);

        interface IInteger16;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CInteger32 {
        constructor(
            [in] Int32 value);

        interface IInteger32;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CInteger64 {
        constructor(
            [in] Int64 value);

        interface IInteger64;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CFloat {
        constructor(
            [in] Float value);

        interface IFloat;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CDouble {
        constructor(
            [in] Double value);

        interface IDouble;
        interface INumber;
        interface ISerializable;
        interface IComparable;
    }

    class CArrayOf {
        constructor(
            [in] InterfaceID riid,
            [in] Int32 size);

        interface IArrayOf;
    }

    class CThrowable {
        constructor();

        constructor(
            [in] String detailMessage);

        constructor(
            [in] String detailMessage,
            [in] IThrowable * cause);

        constructor(
            [in] IThrowable * cause);

        interface IThrowable;
    }

    singleton class CBlockGuard {
         interface IBlockGuard;
    }

    class CCloseGuard {
        interface ICloseGuard;
    }

    singleton class CCloseGuardHelper {
        interface ICloseGuardHelper;
    }


    singleton class CSystem {
         constructor();

         interface ISystem;
    }

    // namespace Reflect {

    // singleton class CProxyFactory {
    //     interface IProxyFactory;
    // }

    // } // namespace Reflect

    } // namespace Core
    } // namepsace Elastos
}
